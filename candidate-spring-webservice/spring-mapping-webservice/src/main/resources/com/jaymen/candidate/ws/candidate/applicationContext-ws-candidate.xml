<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:sws="http://www.springframework.org/schema/web-services"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd
       http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-1.5.xsd">

    <bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory"/>

    <bean id="messageReceiver" class="org.springframework.ws.soap.server.SoapMessageDispatcher"/>

	<bean id="schemaCollection" class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">
    	<description>
        	This bean wrap the messages.xsd (which imports types.xsd), and inlines them as a one.
    	</description>
    	<property name="xsds">
        	<list>
            	<value>/WEB-INF/xsds/messages.xsd</value>            	
        	</list>
    	</property>
    	<property name="inline" value="true"/>
	</bean>
	
    <!-- ===================== ENDPOINTS  ===================================== -->

    <!--
        The marshallingEndpoint and xpathEndpoint handle the same messages. So, you can only use one of them at the
        same time. This is done for illustration purposes only, typically you would not create two endpoints which
        handle the same messages.
    -->

    <bean id="marshallingEndpoint" class="com.jaymen.candidate.ws.candidate.CandidateMarshallingEndPoint">
        <description>
            This endpoint handles the Candidates Web Service messages using JAXB2 marshalling.
        </description>
        <constructor-arg ref="candidateDao"/>
    </bean>

    <bean id="organisationMarshallingEndpoint" class="com.jaymen.candidate.ws.organisation.OrganisationMarshallingEndPoint">
        <description>
            This endpoint handles the Candidates Web Service messages using JAXB2 marshalling.
        </description>
        <constructor-arg ref="organisationDao"/>
    </bean>
    
    <oxm:jaxb2-marshaller id="marshaller" contextPath="com.jaymen.candidate.ws.schema"/>

    <!-- ===================== ENDPOINT MAPPINGS  ============================== -->

    <!--
        The endpoint mappings map from a request to an endpoint. Because we only want the security interception to
        occur for the GetFrequentFlyerMileageEndpoint, we define two mappings: one with the securityInterceptor, and
        a general one without it.
    -->

    <bean id="annotationMapping"
          class="org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping">
        <description>
            Detects @PayloadRoot annotations on @Endpoint bean methods. The MarshallingAirlineEndpoint
            has such annotations. It uses two interceptors: one that logs the message payload, and the other validates
            it accoring to the 'airline.xsd' schema file.
        </description>
        <property name="interceptors">
            <list>
                <bean class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor"/>
                <bean class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
                    <property name="xsdSchemaCollection" ref="schemaCollection"/>
                    <property name="validateRequest" value="true"/>
                    <property name="validateResponse" value="true"/>
                </bean>
            </list>
        </property>
        <property name="order" value="1"/>
    </bean>

    <!-- ===================== ENDPOINT ADAPTERS  ============================== -->

    <!--
        Endpoint adapters adapt from the incoming message to a specific object or method signature. Because this
        example application uses three different endpoint programming models, we have to define three adapters. This
        is done for illustration purposes only, typically you would use one adapter, for instance the
        MarshallingMethodEndpointAdapter.
    -->


    <sws:marshalling-endpoints/>
    
</beans>